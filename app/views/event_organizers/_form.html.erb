<%= form_with(model: event_organizer, local: true) do |form| %>
  <% if event_organizer.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(event_organizer.errors.count, "error") %> prohibited this event_organizer from being saved:</h2>

      <ul>
      <% event_organizer.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <%= form.hidden_field :latitude, id: "latitude" %>
  <%= form.hidden_field :longitude, id: "longitude" %>

  <div class="form-group">
    <%= form.label :name %>
    <%= form.text_field :name, id: :event_organizer_name, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :logo_image %><br>
    <%= form.file_field :logo_image, id: :event_organizer_logo_image %>
  </div>

  <div class="form-group">
    <%= form.label :email %>
    <%= form.text_field :email, id: :event_organizer_email, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :contact %>
    <%= form.text_field :contact, id: :event_organizer_contact, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= form.label :address %>
    <%= form.text_field :address, id: "autocomplete", class: "form-control", onFocus: "geolocate()" %>
  </div>

  <div class="form-group">
    <%= form.label :city %>
    <%= form.text_field :city, id: :locality, class: "form-control", disabled: true %>
  </div>

  <div class="form-group">
    <%= form.label :state %>
    <%= form.text_field :state, id: :administrative_area_level_1, class: "form-control", disabled: true %>
  </div>

  <div class="form-group">
    <%= form.label :country %>
    <%= form.text_field :country, id: :country, class: "form-control", disabled: true %>
  </div>

  <div class="actions">
    <%= form.submit class: "btn btn-primary" %> 
    <%= link_to 'Back', event_organizers_path, class: "btn btn-primary" %>
  </div>
<% end %>


<script>
  // This example displays an address form, using the autocomplete feature
  // of the Google Places API to help users fill in the information.

  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var placeSearch, autocomplete;
  var componentForm = {
    locality: 'long_name',
    administrative_area_level_1: 'long_name',
    country: 'long_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
        {types: ['geocode']});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {

    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();
    
    $("#latitude").val(place.geometry.location.lat());
    $("#longitude").val(place.geometry.location.lng());  
    
    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy
        });
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }
</script>
<script 
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBFBYM37YGMTdgkEp9fipPljSjprTDZL8Y&libraries=places&callback=initAutocomplete"
  async defer></script>